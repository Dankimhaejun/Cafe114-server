#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../server/app');
const cors = require('cors');
app.use(cors());
const debug = require('debug')('cafe114-server:server');
const http = require('http');
const socketio = require('socket.io');
const db = require('../database/models');
const commentModel = require('../server/models/comment');
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {
  console.log('server listening on port ' + port);
});
// TODO: socket-io 서버 구현
const io = socketio(server);

io.on('connection', async socket => {
  console.log('connect client by socket.io, Hello Client');

  // // TODO: 접속시 카페 데이터 제공
  // const cafeData = await cafeModel.cafe.get();
  // socket.emit('giveCafeInfoServerToClient', cafeData);

  // // TODO: 코맨트 접속시 코맨트 데이터 제공
  // socket.on('giveCommentServerToClient', async cafeId => {
  //   console.log('***************************cafeId', cafeId);
  //   const commentData = await commentModel.get.comment(cafeId);
  //   socket.emit('giveCommentServerToClient', commentData);
  // });
  // socket.emit('giveCafeInfoToClient', await cafeModel.cafe.get());

  socket.on('postCafeIdToGetComment', async cafeId => {
    console.log('cafeId', cafeId);
    const commentData = await commentModel.get.comment(cafeId);
    socket.emit('giveCommentsToClient', commentData);
  });

  // TODO: 코맨트 포스트시 코맨트 추가된 새로운 배열을 제공 / 카페도 새로운 것으로 갱신
  socket.on('postCommentToSaveDB', async comment => {
    console.log('comment', comment);
    await db.comments.create({
      userId: comment.userId,
      cafeId: comment.cafeId,
      comment: comment.comment
    });
    console.log('comment.cafeId', comment.cafeId);
    const cafeComments = await db.comments
      .findAll({
        where: { cafeId: comment.cafeId }
      })
      .catch(err => console.error(err));

    socket.emit('giveNewChatInfo', cafeComments);
    socket.broadcast.emit('giveNewChatInfo', cafeComments);
    io.emit('giveNewChatInfo', cafeComments);
    // console.log('cafeComments가 뭐야 어딨어', cafeComments);
    // 메시지를 전송한 클라이언트에게만 메시지를 전송한다
    // socket.emit('giveCommentServerToClient', cafeComments);
    // socket.broadcast.emit('giveCafeInfoServerToClient', cafeData);
  });
});

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
