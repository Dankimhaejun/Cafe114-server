#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../server/app');
const debug = require('debug')('cafe114-server:server');
const http = require('http');
const socketio = require('socket.io');
const db = require('../database/models');
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {
  console.log('server listening on port ' + port);
});

const io = socketio(server);

io.on('connection', socket => {
  console.log('connect client by socket.io');
  socket.on('postCommentClientToServer', async comment => {
    await db.comments.create({
      userId: comment.userId,
      cafeId: comment.cafeId,
      comment: comment.comment
    });
    const cafeComments = await db.comments.findAll({
      where: { cafeId: comment.cafeId }
    });
    // 메시지를 전송한 클라이언트에게만 메시지를 전송한다
    socket.emit('giveCommentServerToClient', cafeComments);
    socket.broadcast.emit('giveCommentServerToClient', cafeComments);
  });
});

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
